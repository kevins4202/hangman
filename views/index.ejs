<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hangman Drawing</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
        href="https://fonts.googleapis.com/css2?family=Butcherman&family=Matemasie&family=Protest+Guerrilla&display=swap"
        rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />
    <link rel="stylesheet" href="./styles.css">
</head>

<body style="position: relative; background-color: white;">
    <img class="bg"
        src="https://cdn.wallpaperhub.app/cloudcache/2/8/a/e/6/b/28ae6beda97f2f5a65157af48e5e05813a16696a.jpg">
    <div style="display: flex; flex-direction: column;">
        <div style="display: flex; flex-direction: column;">
            <!-- hide at first and display over whole screen when win -->
            <h1 id="heading"
                style="font-family: Butcherman; width:fit-content; margin-bottom: 25px;margin: auto; margin-bottom: 25px;;">
                Hangman</h1>
            <h2 style="display: none; font-family: Matemasie; text-align: center; margin-bottom: 25px;">The word was:
                <span class="answer"><%= word %></span></h2>
            <button style="display: none; margin-bottom: 25px;" class="btn btn-danger" id="restart">Play Again</button>

            <div class="hangman-container">
                <div class="gallows">
                    <div class="pole"></div>
                    <div class="beam"></div>
                    <div class="support"></div>
                    <div class="base"></div>
                </div>
                <div class="figure">
                    <!-- <div class="head"> -->
                    <div class="material-symbols-outlined head part">
                        
                    </div>
                    <!-- </div> -->
                    <div class="body"></div>
                    <div class="left-arm part"></div>
                    <div class="right-arm part"></div>
                    <div class="left-leg part"></div>
                    <div class="right-leg part"></div>
                </div>
            </div>
        </div>


        <!-- <div class="wrong-letters"></div> -->
        <div class="display"></div>
        <div id="keyboard">

        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4"
        crossorigin="anonymous"></script>

    <script>
        const word = document.querySelector('.answer').textContent;
        const figureParts = document.querySelectorAll('.figure > div');
        const wrongLetters = [];
        const wordLetters = word.split('');
        const correctLetters = Array(word.length).fill('_');
        console.log(word);
        const display = document.querySelector('.display');
        const maxWrong = 6;
        let wrong = 0;

        // go from neutral to dead in 6 steps
        const faces = ['', 'sentiment_neutral', 'sentiment_dissatisfied', 'sentiment_worried', 'sentiment_frustrated', 'sentiment_stressed', 'sentiment_very_dissatisfied'];

        const keyboardLayout = [
            ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],
            ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],
            ['Z', 'X', 'C', 'V', 'B', 'N', 'M', 'auto']
        ];

        letters = [
            'E', 'T', 'A', 'O', 'I', 'N', 'S', 'R', 'H', 'D',
            'L', 'U', 'C', 'M', 'F', 'Y', 'W', 'G', 'P', 'B',
            'V', 'K', 'X', 'Q', 'J', 'Z'
        ];

        const keyboardContainer = document.getElementById('keyboard');

        // Function to create the keyboard
        function createKeyboard() {
            let i = 0
            keyboardLayout.forEach(rowKeys => {
                // Create a row container
                const row = document.createElement('div');
                row.className = 'row';

                // Add each key to the row
                for (let j = 0; j < rowKeys.length; j++) {
                    const keyElement = document.createElement('span');
                    keyElement.className = `key k${i}`;
                    keyElement.textContent = rowKeys[j];
                    keyElement.onclick = function() {
                        handleKeyPress({
                            key: rowKeys[j]
                        });
                    };
                    row.appendChild(keyElement);
                    i++;
                }
                // Append the row to the keyboard container
                keyboardContainer.appendChild(row);
            });
        }

        var elements = document.getElementsByClassName("key");
        console.log(elements);

        var myFunction = function() {
            const letter = this.textContent;
            console.log(letter);
            handleKeyPress({
                key: letter
            });
        };

        for (var i = 0; i < elements.length; i++) {
            elements[i].addEventListener('click', myFunction);
        }

        // Call the function to create the keyboard
        createKeyboard();

        function displayWord() {
            display.innerHTML = correctLetters.join(' ');
        }

        function displayWrongLetters() {
            let k = 0;
            for (let i = 0; i < 3; i++) {
                for (let j = 0; j < keyboardLayout[i].length; j++) {
                    if (wrongLetters.includes(keyboardLayout[i][j].toLowerCase())) {
                        document.querySelector(`.k${k}`).style.backgroundColor = 'red';
                    }

                    k++;
                }
            }
        }

        function displayCorrectLetters() {
            let k = 0;
            for (let i = 0; i < 3; i++) {
                for (let j = 0; j < keyboardLayout[i].length; j++) {
                    if (correctLetters.includes(keyboardLayout[i][j].toLowerCase())) {
                        document.querySelector(`.k${k}`).style.backgroundColor = 'green';
                    }

                    k++;
                }
            }
        }



        function displayFigure() {
            figureParts.forEach((part, index) => {
                if (index < wrong) {
                    part.style.display = 'block';
                } else {
                    part.style.display = 'none';
                }
            });

            // Change the face
            document.querySelector('.head').textContent = faces[wrong];
        }

        function updateDisplay() {
            displayWord();
            displayFigure();
            displayWrongLetters();
            displayCorrectLetters();
        }

        function displayButton() {
            const button = document.querySelector('#restart');
            button.style.display = 'block';
            //disable keypress
            document.removeEventListener('keypress', handleKeyPress);
        }

        function checkWin() {
            if (correctLetters.join('') === word) {
                document.querySelector('#heading').textContent = 'You win!';
                displayButton();
            }
        }

        function checkLose() {
            if (wrong === maxWrong) {
                document.querySelector('#heading').textContent = 'You lose!';
                document.querySelector('h2').style.display = 'block';
                displayButton();
            }
        }

        function checkLetter(letter) {
            if (wordLetters.includes(letter)) {
                wordLetters.forEach((element, index) => {
                    if (element === letter) {
                        correctLetters[index] = letter;
                    }
                });
            } else {
                wrongLetters.push(letter);
                wrong++;
                document.body.style.backgroundColor = 'white'; 
            }
        }

        let autoButton = document.getElementsByClassName('k26');
        // console.lo
        autoButton[0].classList.add('btn');
        autoButton[0].classList.add('btn-info');
        autoButton[0].classList.remove('key');
        autoButton[0].addEventListener('click', autoSelect);

        function autoSelect() {
            console.log(letters[0])
            handleKeyPress({
                key: letters[0]
            });
            
        }

        function handleKeyPress(event) {
            const letter = event.key.toLowerCase();
            const index = letters.indexOf(letter.toUpperCase());

            if (index > -1) { // only splice array when item is found
                letters.splice(index, 1); // 2nd parameter means remove one item only
            }
            
            if (letter.toLowerCase() != letter.toUpperCase()) {
                if (wrong < maxWrong && !wrongLetters.includes(letter) && !correctLetters.includes(letter)) {
                    checkLetter(letter);
                    updateDisplay();
                    checkWin();
                    checkLose();
                }
            }
        }

        document.addEventListener('keypress', handleKeyPress);
        updateDisplay();
        // on click, render /restart
        document.querySelector('#restart').addEventListener('click', () => {
            location.reload();
        });
    </script>
</body>

</html>